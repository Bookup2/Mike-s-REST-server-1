unit Form.Main;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  FMX.Edit, IdHTTPWebBrokerBridge, IdGlobal, Web.HTTPApp,
  FMX.Controls.Presentation, FMX.Memo.Types, FMX.ScrollBox, FMX.Memo, FMX.EditBox, FMX.SpinBox,
  System.INIFiles, System.IOUtils, System.Rtti, FMX.Grid.Style, FMX.Grid,

  // ChessEngineController,
  ChessEngineControllerUCIForWindows,
  ChessEngineDataThread,

  Globals,

  PocketGMBook;


type
  TMainForm = class(TForm)
    ButtonStart: TButton;
    ButtonStop: TButton;
    EditPort: TEdit;
    Label1: TLabel;
    ButtonOpenBrowser: TButton;
    EditLocalIP: TEdit;
    RequestsMemo: TMemo;
    StartEnginesButton: TButton;
    NumberOfEnginesSpinBox: TSpinBox;
    StopEnginesButton: TButton;
    EngineEXEFilenameLabel: TLabel;
    EngineCutoffTimer: TTimer;
    NodeCountCutOffSpinBox: TSpinBox;
    Label2: TLabel;
    SecondsCutOffSpinBox: TSpinBox;
    Label3: TLabel;
    LogFileButton: TButton;
    EngineStatusStringGrid: TStringGrid;
    SaveDialog1: TSaveDialog;
    UseLogFileCheckBox: TCheckBox;
    LogFileNameLabel: TLabel;
    NumberOfEnginesRunningLabel: TLabel;
    NumberOfTotalRequestsLabel: TLabel;
    NoRequestsSpinBox: TSpinBox;
    Label4: TLabel;
    CachePanel: TPanel;
    Label8: TLabel;
    CacheHitsLabel: TLabel;
    Label7: TLabel;
    CacheErrorsLabel: TLabel;
    CacheSizeLabel: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    CacheAdditionsLabel: TLabel;
    Label10: TLabel;
    AllowCacheUpdatesCheckBox: TCheckBox;
    CacheUpdatesLabel: TLabel;
    Label11: TLabel;
    CacheRejectionsLabel: TLabel;
    Label12: TLabel;
    Label9: TLabel;
    ServerBusyCountLabel: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure ButtonStartClick(Sender: TObject);
    procedure ButtonStopClick(Sender: TObject);
    procedure ButtonOpenBrowserClick(Sender: TObject);
    procedure StartEnginesButtonClick(Sender: TObject);
    procedure StopEnginesButtonClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure EngineCutoffTimerTimer(Sender: TObject);
    procedure LogFileButtonClick(Sender: TObject);

  private

    fCacheErrors,
    fCacheHits,
    fCacheAdditions,
    fCacheUpdates,
    fCacheRejections: Integer;
    fCacheBook: TCachedServerReplyBook;
    fCacheFileName: String;

    fColumnStatus,
    fColumnClientID,
    fColumnTimeSpent,
    fColumnTimeSinceLastRequest,
    fColumnNumberOfRequests,
    fColumnDepth,
    fColumnNodeCount,
    fColumnPV,
    fColumnEngineNumber: TStringColumn;

    fEngineLogFileName: String;
    // fNumberOfEnginesRunning: Integer;
    // fChessEngineControllers: Array[1..10] of TChessEngineControllerUCIForWindows;
    fEngineFileName: String;
    fChessEngineDataThread: TChessEngineDataThread;

    FServer: TIdHTTPWebBrokerBridge;

    fNumberOfRequestsServed: Cardinal;
    fNumberOfServerBusy: Cardinal;

    procedure StoreAnalysisInCache(theEngineNumber: Integer);

    procedure StopEngines;

    procedure StartServer;
    procedure ApplicationIdle(Sender: TObject; var Done: Boolean);
    procedure LookForEnginesToCutOffByNodesOrTimeSpentOnAnalysis;
    procedure LookForEnginesToCutOffByTooLongSinceLastClientRequest;
    function NumberOfEnginesAnalyzing: Integer;

  public

    function ServerStatusForBrowser: String;

    procedure AnalyzeThisPositionForClient(theFEN: String;
                                           theClientID: String;
                                           var theReplyForTheClient: String);
  end;

var
  MainForm: TMainForm;

implementation

{$R *.fmx}

uses
{$IFDEF MSWINDOWS}
  WinApi.Windows, Winapi.ShellApi, Winsock,
{$ENDIF}
  System.Generics.Collections;


const

  kINIFileName = 'ServerSettings.INI';
  kINIEngineFilenameTag = 'EngineEXEFile';
  kINICacheFileNameTag = 'CacheFileName';  // /Cache Database/PocketGMCacheBook.PGC
  // kMaximumChessEngines = 10;
  kRESTEngineServerBusy = '#ServerBusy';
  kRESTEngineServerStartedThinking = '#StartedThinking';
  kPocketGMCacheBookFileName = 'PocketGMCacheBook.PGC';
  kFolderCache = 'Cache Database';


function AddCommasTo(theNumber: String): String;
var
  theCommaPosition: Integer;

begin
  theCommaPosition := Length(theNumber) - 2;

  while (theCommaPosition > 1) do
    begin
      Insert(',', theNumber, theCommaPosition);

      theCommaPosition := theCommaPosition - 3
    end;

  Result := theNumber;
end;



function GetLocalIP: string;
type
  TaPInAddr = array [0..10] of PInAddr;
  PaPInAddr = ^TaPInAddr;
var
  phe: PHostEnt;
  pptr: PaPInAddr;
  Buffer: array [0..63] of Ansichar;
  i: Integer;
  GInitData: TWSADATA;
begin
  WSAStartup($101, GInitData);
  Result := '';
  GetHostName(Buffer, SizeOf(Buffer));
  phe := GetHostByName(Buffer);
  if phe = nil then
    Exit;
  pptr := PaPInAddr(phe^.h_addr_list);
  i := 0;
  while pptr^[i] <> nil do
  begin
    Result := StrPas(inet_ntoa(pptr^[i]^));
    Inc(i);
  end;
  WSACleanup;
end;


procedure TMainForm.AnalyzeThisPositionForClient(theFEN: String; theClientID: String;
  var theReplyForTheClient: String);
var
  theEngineNumber: Integer;
  // DebugString: String;
  K: Integer;
  theEPDBeingAnalyzed: String;
  theClientIDBeingServed: String;
  theScore: Integer;
  theNodeCount: Cardinal;
  theDepth: Integer;
  theRequestValue: Integer;
  theErrorCode: Integer;
  DebugString: String;
  theCachedReply: String;
  DebugExistsInCache: Boolean;

begin
  Inc(fNumberOfRequestsServed);

  if (RequestsMemo.Lines.Count > 50) then RequestsMemo.Text := '';

  // RequestsMemo.Lines.Add(theClientID  + ' ' + theFEN);

  if (fCacheBook <> nil)
    then
      begin
        theCachedReply := '';

        DebugExistsInCache := fCacheBook.FENExists(theFEN);

        fCacheBook.FillInEverything(theFEN, theCachedReply);

        if DebugExistsInCache and (theCachedReply = '')
          then
            begin
              Inc(fCacheErrors);

              CacheErrorsLabel.Text := fCacheErrors.ToString;
            end;


        if (theCachedReply > '')
          then
            begin
              Inc(fCacheHits);
              CacheHitsLabel.Text := fCacheHits.ToString;
              theReplyForTheClient := theCachedReply + '&Cloud=1';
              Exit;
            end;
      end;

  theEngineNumber := 0;

    // Look for an engine already serving this client.
  repeat

    Inc(theEngineNumber);

    theEPDBeingAnalyzed := gChessEngineControllers[theEngineNumber].GetEPDBeingAnalyzed;

    theClientIDBeingServed := gChessEngineControllers[theEngineNumber].GetClientID;

  until (theClientIDBeingServed = theClientID) or
        (theEngineNumber = gNumberOfEnginesRunning);

    // We found an engine serving this client for another position.
  if (theClientIDBeingServed = theClientID) and
     (theEPDBeingAnalyzed <> theFEN)
    then
      begin
        gChessEngineControllers[theEngineNumber].StopAnalyzing;

        gChessEngineControllers[theEngineNumber].SendEPDPositionToEngine(theFEN, 0, True, True, theClientID);

        theReplyForTheClient := kRESTEngineServerStartedThinking; // 'StartedThinking';

        EngineStatusStringGrid.Cells[1, theEngineNumber] := 'Switched';
        EngineStatusStringGrid.Cells[2, theEngineNumber] := theClientID;
        EngineStatusStringGrid.Cells[3, theEngineNumber] := '*';     // requests
        EngineStatusStringGrid.Cells[4, theEngineNumber] := '*';     // time since last request
        EngineStatusStringGrid.Cells[5, theEngineNumber] := '*';     // time spent analyzing
        EngineStatusStringGrid.Cells[6, theEngineNumber] := '*';
        EngineStatusStringGrid.Cells[7, theEngineNumber] := '*';
        EngineStatusStringGrid.Cells[8, theEngineNumber] := '*';      // PV

        Exit;
      end;


    // If an engine says it is analyzing this position for this client then return the best line.
  if (theClientIDBeingServed = theClientID) and
     (theEPDBeingAnalyzed = theFEN)
    then
      begin
        theReplyForTheClient := '';

        DebugString := EngineStatusStringGrid.Cells[3, theEngineNumber];

        Val(EngineStatusStringGrid.Cells[3, theEngineNumber], theRequestValue, theErrorCode);

        if (theErrorCode = 0)
          then EngineStatusStringGrid.Cells[3, theEngineNumber] := (theRequestValue + 1).ToString
          else EngineStatusStringGrid.Cells[3, theEngineNumber] := '?';

        EngineStatusStringGrid.Cells[1, theEngineNumber] := 'Analyzing';
        EngineStatusStringGrid.Cells[2, theEngineNumber] := gChessEngineControllers[theEngineNumber].GetClientID;
        EngineStatusStringGrid.Cells[4, theEngineNumber] := gChessEngineControllers[theEngineNumber].GetTimeSinceLastRequest.ToString;
        EngineStatusStringGrid.Cells[5, theEngineNumber] := gChessEngineControllers[theEngineNumber].GetTimeSpentAnalyzing.ToString;
        EngineStatusStringGrid.Cells[6, theEngineNumber] := gChessEngineControllers[theEngineNumber].GetDepth.ToString;
        EngineStatusStringGrid.Cells[7, theEngineNumber] := gChessEngineControllers[theEngineNumber].GetNodeCount.ToString;
        EngineStatusStringGrid.Cells[8, theEngineNumber] := gChessEngineControllers[theEngineNumber].GetScore(1).ToString + ' ' + gChessEngineControllers[theEngineNumber].GetPrincipleVariation(1);

        for K := 1 to gChessEngineControllers[theEngineNumber].GetTotalPrincipleVariations do
          begin
            theReplyForTheClient := theReplyForTheClient +
              'pv' + K.ToString + '=' + gChessEngineControllers[theEngineNumber].GetPrincipleVariation(K);

            theScore := gChessEngineControllers[theEngineNumber].GetScore(K);

            theReplyForTheClient := theReplyForTheClient +
              '&score' + K.ToString + '=' + theScore.ToString;

            if (K < gChessEngineControllers[theEngineNumber].GetTotalPrincipleVariations)
              then theReplyForTheClient := theReplyForTheClient + '&';
          end;

        theNodeCount := gChessEngineControllers[theEngineNumber].GetNodeCount;

        theDepth := gChessEngineControllers[theEngineNumber].GetDepth;

        theReplyForTheClient := theReplyForTheClient +
              '&depth=' + theDepth.ToString + '&nodecount=' + theNodeCount.ToString;

        // EngineStatusMemo.Lines[theEngineNumber] := 'Engine-' + theEngineNumber.ToString + ' (' + fNumberOfRequestsServed.ToString +  ') ' + theClientID + ' ' + theReplyForTheClient;

        Exit;
      end;

    // Look for an engine not currently serving a client.
  theEngineNumber := 0;

  repeat

    Inc(theEngineNumber);

    theEPDBeingAnalyzed := gChessEngineControllers[theEngineNumber].GetEPDBeingAnalyzed;

  until (theEPDBeingAnalyzed = '') or
        (theEngineNumber = gNumberOfEnginesRunning);

    // If we cycled through every controller and the last one was analyzing an EPD
    // then the server is busy.
  if (theEPDBeingAnalyzed > '')
    then
      begin
        theReplyForTheClient := kRESTEngineServerBusy; // 'ServerBusy';

        RequestsMemo.Lines.Add('*** Server busy ***');

        Inc(fNumberOfServerBusy);

        ServerBusyCountLabel.Text := fNumberOfServerBusy.ToString;

        Exit;
      end;

  gChessEngineControllers[theEngineNumber].SendEPDPositionToEngine(theFEN, 0, True, True, theClientID);
  theReplyForTheClient := kRESTEngineServerStartedThinking; // 'StartedThinking';

  EngineStatusStringGrid.Cells[3, theEngineNumber] := '1';

        EngineStatusStringGrid.Cells[1, theEngineNumber] := 'Started';
        EngineStatusStringGrid.Cells[2, theEngineNumber] := theClientID;
        EngineStatusStringGrid.Cells[3, theEngineNumber] := '1';     // requests
        EngineStatusStringGrid.Cells[4, theEngineNumber] := '*';
        EngineStatusStringGrid.Cells[5, theEngineNumber] := '*';
        EngineStatusStringGrid.Cells[6, theEngineNumber] := '*';
        EngineStatusStringGrid.Cells[7, theEngineNumber] := '*';
        EngineStatusStringGrid.Cells[8, theEngineNumber] := '*';

  // EngineStatusMemo.Lines[theEngineNumber] := 'Engine-' + theEngineNumber.ToString + ' (' + fNumberOfRequestsServed.ToString +  ')'  + theReplyForTheClient;
  NumberOfTotalRequestsLabel.Text := fNumberOfRequestsServed.ToString + ' Requests handled';
end;



procedure TMainForm.ApplicationIdle(Sender: TObject; var Done: Boolean);
begin
  ButtonStart.Enabled := not FServer.Active;
  ButtonStop.Enabled := FServer.Active;
  EditPort.Enabled := not FServer.Active;
end;



function TMainForm.ServerStatusForBrowser: String;
begin
  Result := 'Number of engines running = ' + gNumberOfEnginesRunning.ToString + '<br>' +
            'Number of engines analyzing = ' + NumberOfEnginesAnalyzing.ToString + '<br>' +
            'Number of requests served = ' + fNumberOfRequestsServed.ToString;
end;



procedure TMainForm.StartEnginesButtonClick(Sender: TObject);
var
  K: Integer;

begin
  if (gNumberOfEnginesRunning > 0)
    then
      begin
        RequestsMemo.Lines.Add('*** Engines are already running - command ignored ***');

        Exit;
      end;

    // Create some engine instances.
  gNumberOfEnginesRunning := Trunc(NumberOfEnginesSpinBox.Value);

  EngineStatusStringGrid.RowCount := gNumberOfEnginesRunning + 1;

  EngineStatusStringGrid.BeginUpdate;
  EngineStatusStringGrid.Cells[0, 0] := ' ';
  EngineStatusStringGrid.Cells[1, 0] := 'Status';
  EngineStatusStringGrid.Cells[2, 0] := 'Client';
  EngineStatusStringGrid.Cells[3, 0] := 'Requests';
  EngineStatusStringGrid.Cells[4, 0] := 'Time Since Request';
  EngineStatusStringGrid.Cells[5, 0] := 'Time Analyzing';
  EngineStatusStringGrid.Cells[6, 0] := 'Depth';
  EngineStatusStringGrid.Cells[7, 0] := 'Nodes';
  EngineStatusStringGrid.Cells[8, 0] := 'PV';
  EngineStatusStringGrid.EndUpdate;
   //                  PastMovesGrid.Repaint;

  for K := 1 to gNumberOfEnginesRunning do
    begin
      EngineStatusStringGrid.Cells[0, K] := K.ToString;
    end;

  for K := 1 to gNumberOfEnginesRunning do
    begin
      gChessEngineControllers[K] := TChessEngineControllerUCIForWindows.Create;

      gChessEngineControllers[K].Connect(fEngineFileName);

      EngineStatusStringGrid.Cells[1, K] := 'Connected';

      if not gChessEngineControllers[K].Connected
        then
          begin
            ShowMessage('There was a problem connecting with engine ' + K.ToString);

            Exit;
          end;

    end;

  // gChessEngineControllers[1].SetLogFileName('Engine1LogFile.txt');

  RequestsMemo.Lines.Add(gNumberOfEnginesRunning.ToString + ' engines started.');

  StartEnginesButton.Enabled := False;
  StopEnginesButton.Enabled := True;

  EngineCutoffTimer.Enabled := True;
end;



procedure TMainForm.ButtonOpenBrowserClick(Sender: TObject);
{$IFDEF MSWINDOWS}
var
  LURL: string;
{$ENDIF}
begin
  StartServer;
{$IFDEF MSWINDOWS}
  LURL := Format('http://localhost:%s', [EditPort.Text]);
  ShellExecute(0,
        nil,
        PChar(LURL), nil, nil, SW_SHOWNOACTIVATE);
{$ENDIF}
end;


procedure TMainForm.ButtonStartClick(Sender: TObject);
begin
  StartServer;
end;



procedure TMainForm.ButtonStopClick(Sender: TObject);
begin
  FServer.Active := False;
  FServer.Bindings.Clear;
end;



procedure TMainForm.EngineCutoffTimerTimer(Sender: TObject);
var
  K: Integer;
begin
  // RequestsMemo.Lines.Add('--- Looking for engines to cut off ---');

  for K := 1 to gNumberOfEnginesRunning do
    begin
      if (gChessEngineControllers[K].GetEPDBeingAnalyzed > '')
        then
          begin
            EngineStatusStringGrid.Cells[4, K] := gChessEngineControllers[K].GetTimeSinceLastRequest.ToString;
            EngineStatusStringGrid.Cells[5, K] := gChessEngineControllers[K].GetTimeSpentAnalyzing.ToString;
          end;
    end;

  LookForEnginesToCutOffByNodesOrTimeSpentOnAnalysis;
  LookForEnginesToCutOffByTooLongSinceLastClientRequest;
end;



procedure TMainForm.FormCreate(Sender: TObject);
var
//   TESTMemoryLeak: TButton;
  theINIFile: TIniFile;
  theINIFileName: String;
  theEXEFileName: String;
  K: Integer;

begin
  fCacheErrors := 0;
  fCacheUpdates := 0;
  fCacheAdditions := 0;
  fCacheHits := 0;
  fCacheRejections := 0;

  CacheErrorsLabel.Text := 'None';
  CacheHitsLabel.Text := 'None';
  CacheAdditionsLabel.Text := 'None';
  CacheSizeLabel.Text := 'unknown';
  CacheUpdatesLabel.Text := 'None';
  CacheRejectionsLabel.Text := 'None';

  ServerBusyCountLabel.Text := 'Not yet';

  fEngineLogFileName := 'EngineLogFile.TXT';

  fColumnEngineNumber         := TStringColumn.Create(EngineStatusStringGrid);
  fColumnStatus               := TStringColumn.Create(EngineStatusStringGrid);
  fColumnClientID             := TStringColumn.Create(EngineStatusStringGrid);
  fColumnTimeSpent            := TStringColumn.Create(EngineStatusStringGrid);
  fColumnNumberOfRequests     := TStringColumn.Create(EngineStatusStringGrid);
  fColumnTimeSinceLastRequest := TStringColumn.Create(EngineStatusStringGrid);
  fColumnDepth                := TStringColumn.Create(EngineStatusStringGrid);
  fColumnNodeCount            := TStringColumn.Create(EngineStatusStringGrid);
  fColumnPV                   := TStringColumn.Create(EngineStatusStringGrid);

  fColumnEngineNumber.Width := 30;
  fColumnStatus.Width := 100;
  fColumnClientID.Width := 110;
  fColumnTimeSpent.Width := 90;
  fColumnTimeSinceLastRequest.Width := 90;
  fColumnNumberOfRequests.Width := 80;
  fColumnDepth.Width := 50;
  fColumnNodeCount.Width := 120;
  fColumnPV.Width := 580;

  // Pastmovesgrid.TextSettings.Font.Size := gPreferences.PastMovesFontSize;
  // Pastmovesgrid.TextSettings.Font.Family := 'LinaresFigurine';
  // PastMovesGrid.RowHeight := 1.25 * Pastmovesgrid.TextSettings.Font.Size; // 35;

  EngineStatusStringGrid.AddObject(fColumnEngineNumber);
  EngineStatusStringGrid.AddObject(fColumnStatus);
  EngineStatusStringGrid.AddObject(fColumnClientID);
  EngineStatusStringGrid.AddObject(fColumnNumberOfRequests);
  EngineStatusStringGrid.AddObject(fColumnTimeSinceLastRequest);
  EngineStatusStringGrid.AddObject(fColumnTimeSpent);
  EngineStatusStringGrid.AddObject(fColumnDepth);
  EngineStatusStringGrid.AddObject(fColumnNodeCount);
  EngineStatusStringGrid.AddObject(fColumnPV);

  EditLocalIP.Text := GetLocalIP;
  FServer := TIdHTTPWebBrokerBridge.Create(Self);
  Application.OnIdle := ApplicationIdle;

  // TESTMemoryLeak := TButton.Create(nil);

  {$IFDEF DEBUG}
  System.ReportMemoryLeaksOnShutdown := True;
  {$ENDIF}

  fNumberOfRequestsServed := 0;
  fNumberOfServerBusy := 0;

  gNumberOfEnginesRunning := 0;

  StartEnginesButton.Enabled := True;
  StopEnginesButton.Enabled := False;

  theINIFileName := TPath.Combine(ExtractFilePath(ParamStr(0)), kINIFileName);

  Assert(FileExists(theINIFileName), 'The INI file was not found.');

  theINIFile := TIniFile.Create(theINIFileName);

  theEXEFileName := theINIFile.ReadString('ProgramPreferences', kINIEngineFilenameTag, '');

  fEngineFileName := TPath.Combine(ExtractFilePath(ParamStr(0)), 'Engines\' + theEXEFileName);

  EngineEXEFilenameLabel.Text := fEngineFileName;

  fCacheFileName := theINIFile.ReadString('ProgramPreferences', kINICacheFileNameTag, '');

  theINIFile.Free;

  fCacheBook := TCachedServerReplyBook.Create;
  fCacheFileName := TPath.Combine(ExtractFilePath(ParamStr(0)), 'Cache Database\' + fCacheFileName);

  // CacheFolder := IncludeTrailingPathDelimiter(System.IOUtils.TPath.Combine(ExtractFilePath(ParamStr(0)), kFolderCache));
  // CacheFileName := System.IOUtils.TPath.Combine(CacheFolder, kPocketGMCacheBookFileName);

  if not FileExists(fCacheFileName)
    then
      begin
        ShowMessage('Cache database not found  - ' + fCacheFileName);
        FreeAndNil(fCacheBook);
      end
    else
      begin
        fCacheBook.OpenDatabase(CacheFileName);

        CacheSizeLabel.Text := AddCommasTo(fCacheBook.NumberOfFENs.ToString);
      end;

  for K := 1 to kMaximumChessEngines do
    gChessEngineControllers[K] := nil;

  fChessEngineDataThread := TChessEngineDataThread.Create;
end;



procedure TMainForm.FormDestroy(Sender: TObject);
begin
  StopEngines;

  try

    fChessEngineDataThread.FinishUp;
    Sleep(300);

    fChessEngineDataThread.FreeOnTerminate := True;
    fChessEngineDataThread.Terminate;

  except

    ShowMessage('There was a problem ending the conversation with the chess engine.');

  end;

  fChessEngineDataThread.Free;

  if (fCacheBook <> nil)
    then
      begin
        fCacheBook.CloseDatabase;
        fCacheBook.Free;
      end;
end;



procedure TMainForm.LogFileButtonClick(Sender: TObject);
begin
  SaveDialog1.FileName := ExtractFileName(fEngineLogFileName);

  if not SaveDialog1.Execute then Exit;

  fEngineLogFileName := SaveDialog1.FileName;

  UseLogFileCheckBox.IsChecked := True;

  LogFileNameLabel.Text := fEngineLogFileName;
end;



procedure TMainForm.LookForEnginesToCutOffByTooLongSinceLastClientRequest;
var
  K: Integer;

begin
  for K := 1 to gNumberOfEnginesRunning do
    begin
      if (gChessEngineControllers[K].GetEPDBeingAnalyzed > '') and
         (gChessEngineControllers[K].GetTimeSinceLastRequest > Trunc(NoRequestsSpinBox.Value * 1000))
        then
          begin
              // This sets the FEN to blank.
            gChessEngineControllers[K].StopAnalyzing;

            RequestsMemo.Lines.Add('Engine ' + K.ToString + ' Cut off for too long since a request (' + gChessEngineControllers[K].GetTimeSinceLastRequest.ToString + ')');

            EngineStatusStringGrid.Cells[1, K] := 'No requests';
          end;
    end;
end;



procedure TMainForm.LookForEnginesToCutOffByNodesOrTimeSpentOnAnalysis;
var
  K: Integer;
  DebugGetTimeSpentAnalyzing,
  DebugGetTimeMaximum: Int64;

begin
  NumberOfEnginesRunningLabel.Text := NumberOfEnginesAnalyzing.ToString + ' Engines analyzing';

    // Skip this if we're not running short of engines.
  if (NumberOfEnginesAnalyzing < (gNumberOfEnginesRunning - 1)) then Exit;

  // RequestsMemo.Lines.Add('--- Looking for engines to cut off for time analyzing or node limit ---');

  for K := 1 to gNumberOfEnginesRunning do
    begin
      if (gChessEngineControllers[K].GetEPDBeingAnalyzed > '')
        then
          begin
            if (gChessEngineControllers[K].GetNodeCount > NodeCountCutOffSpinBox.Value * 1000000)
              then
                begin
                  StoreAnalysisInCache(K);

                    // This sets the FEN to blank.
                  gChessEngineControllers[K].StopAnalyzing;

                  RequestsMemo.Lines.Add('Engine ' + K.ToString + ' Cut off for node count');
                end
              else
                begin
                  DebugGetTimeSpentAnalyzing := gChessEngineControllers[K].GetTimeSpentAnalyzing;
                  DebugGetTimeMaximum := Trunc(SecondsCutOffSpinBox.Value);
                  DebugGetTimeMaximum := DebugGetTimeMaximum * 1000;

                  if (gChessEngineControllers[K].GetTimeSpentAnalyzing > Trunc(SecondsCutOffSpinBox.Value * 1000))
                    then
                      begin
                        StoreAnalysisInCache(K);

                          // This sets the FEN to blank.
                        gChessEngineControllers[K].StopAnalyzing;

                        RequestsMemo.Lines.Add('Engine ' + K.ToString + ' Cut off for seconds (' + AddCommasTo(gChessEngineControllers[K].GetTimeSpentAnalyzing.ToString) + ')');

                        EngineStatusStringGrid.Cells[1, K] := 'Cut off';
                      end;
                end;

          end;
    end;
end;



function TMainForm.NumberOfEnginesAnalyzing: Integer;
var
  NumberOfEngines: Integer;
  K: Integer;

begin
  NumberOfEngines := 0;

  for K := 1 to gNumberOfEnginesRunning do
    if (gChessEngineControllers[K].GetEPDBeingAnalyzed > '')
      then Inc(NumberOfEngines);

  Result := NumberOfEngines;
end;



procedure TMainForm.StartServer;
begin
  if not FServer.Active then
  begin
    FServer.Bindings.Clear;
    FServer.DefaultPort := StrToInt(EditPort.Text);
    FServer.Active := True;
  end;
end;



procedure TMainForm.StopEngines;
var
  K: Integer;

begin
  EngineCutoffTimer.Enabled := False;

  if (gNumberOfEnginesRunning = 0) then Exit;

  for K := 1 to gNumberOfEnginesRunning do
    begin
      if gChessEngineControllers[K].Connected
        then gChessEngineControllers[K].Disconnect(False);

      gChessEngineControllers[K].Free;
    end;

  RequestsMemo.Lines.Add(gNumberOfEnginesRunning.ToString + ' engines freed.');

  gNumberOfEnginesRunning := 0;

  StartEnginesButton.Enabled := True;
  StopEnginesButton.Enabled := False;
end;



procedure TMainForm.StopEnginesButtonClick(Sender: TObject);
begin
  StopEngines;
end;



procedure TMainForm.StoreAnalysisInCache(theEngineNumber: Integer);
var
  theReplyForTheClient: String;
  theFEN: String;
  K: Integer;
  theScore,
  theNodeCount,
  theDepth: Integer;
  theTimeSpentAnalyzing: Int64;

begin
  theReplyForTheClient := '';

  theFEN := gChessEngineControllers[theEngineNumber].GetEPDBeingAnalyzed;

  for K := 1 to gChessEngineControllers[theEngineNumber].GetTotalPrincipleVariations do
    begin
      theReplyForTheClient := theReplyForTheClient +
        'pv' + K.ToString + '=' + gChessEngineControllers[theEngineNumber].GetPrincipleVariation(K);

      theScore := gChessEngineControllers[theEngineNumber].GetScore(K);

      theReplyForTheClient := theReplyForTheClient +
        '&score' + K.ToString + '=' + theScore.ToString;

      if (K < gChessEngineControllers[theEngineNumber].GetTotalPrincipleVariations)
        then theReplyForTheClient := theReplyForTheClient + '&';
    end;

  theNodeCount := gChessEngineControllers[theEngineNumber].GetNodeCount;

  theDepth := gChessEngineControllers[theEngineNumber].GetDepth;

  theReplyForTheClient := theReplyForTheClient +
        '&depth=' + theDepth.ToString + '&nodecount=' + theNodeCount.ToString;

  theTimeSpentAnalyzing := gChessEngineControllers[theEngineNumber].GetTimeSpentAnalyzing;

  if (theTimeSpentAnalyzing < (SecondsCutOffSpinBox.Value * 1000))
    then
      begin
        RequestsMemo.Lines.Add('Cache rejected analysis - not enough time');
        Inc(fCacheRejections);
        CacheRejectionsLabel.Text := fCacheRejections.ToString;

        Exit;
      end;

  if (theNodeCount > (NodeCountCutOffSpinBox.Value * 1000000))
    then
      begin
        RequestsMemo.Lines.Add('Cache rejected analysis - not enough nodes');
        Inc(fCacheRejections);
        CacheRejectionsLabel.Text := fCacheRejections.ToString;

        Exit
      end;

  if (fCacheBook.FENExists(theFEN))
    then
      begin
        Inc(fCacheUpdates);
        CacheUpdatesLabel.Text := fCacheUpdates.ToString;
      end
    else
      begin
        Inc(fCacheAdditions);
        CacheAdditionsLabel.Text := fCacheAdditions.ToString;
      end;

  if AllowCacheUpdatesCheckBox.isChecked
    then fCacheBook.UpdateEverything(theFEN, theReplyForTheClient);
end;



end.
